version: '3.5'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}
volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  minio:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  docker-in-docker:
    driver: ${VOLUMES_DRIVER}

services:

  ### Workspace Utilities ##################################
  workspace:
    build:
      context: ./workspace
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - BASE_IMAGE_TAG_PREFIX=${WORKSPACE_BASE_IMAGE_TAG_PREFIX}
        # - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
        # - INSTALL_LINUXBREW=${WORKSPACE_INSTALL_LINUXBREW}
        - PUID=${WORKSPACE_PUID}
        - PGID=${WORKSPACE_PGID}
        - TZ=${WORKSPACE_TIMEZONE}
        - INSTALL_DOCKER_CLIENT=${WORKSPACE_INSTALL_DOCKER_CLIENT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - docker-in-docker:/certs/client
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "${WORKSPACE_SSH_PORT}:22"
      - "${WORKSPACE_SERVE_HOST_PORT}:8080"
      - "${WORKSPACE_HOST_PORT}:8000"
    tty: true
    environment:
      - IDE_CONFIG=${IDE_CONFIG}
      - DOCKER_HOST=tcp://docker-in-docker:2376
      - DOCKER_TLS_VERIFY=1
      - DOCKER_TLS_CERTDIR=/certs
      - DOCKER_CERT_PATH=/certs/client
      - CHOKIDAR_USEPOLLING=true
    networks:
      - frontend
      - backend
    links:
      - docker-in-docker

  ### Minio ################################################
  minio:
    build: ./minio
    volumes:
      - ${DATA_PATH_HOST}/minio/data:/export
      - ${DATA_PATH_HOST}/minio/config:/root/.minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    networks:
      - frontend
      - backend

  ### MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend

  ### MongoDB ##############################################
  mongo:
    build: ./mongo
    ports:
      - "${MONGODB_PORT}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend

  ### Redis ################################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    command: --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

  ### Redis Cluster ##########################################
  redis-cluster:
    build: ./redis-cluster
    ports:
      - "${REDIS_CLUSTER_PORT_RANGE}:7000-7005"
    networks:
      - backend

  ### RabbitMQ #############################################
  rabbitmq:
    build: ./rabbitmq
    ports:
      - "${RABBITMQ_NODE_HOST_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
      - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
      - "${RABBITMQ_WEB_STOMP_HOST_PORT}:15674"
    privileged: true
    hostname: godock-rabbitmq
    volumes:
      - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/management_agent.disable_metrics_collector.conf:/etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf
    networks:
      - backend

  ### ElasticSearch ########################################
  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        - ELK_VERSION=${ELK_VERSION}
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      - cluster.name=godock-cluster
      - node.name=godock-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.initial_master_nodes=godock-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    networks:
      - frontend
      - backend

  ### Kibana ##############################################
  kibana:
    build:
      context: ./kibana
      args:
        - ELK_VERSION=${ELK_VERSION}
    ports:
      - "${KIBANA_HTTP_PORT}:5601"
    depends_on:
      - elasticsearch
    networks:
      - frontend
      - backend

  ### HAProxy ####################################
  haproxy:
    build: ./haproxy
    ports:
      - "${HAPROXY_HOST_HTTP_PORT}:8085"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    links:
      - proxy
      - proxy2

  ### IPython #########################################
  ipython-controller:
    build:
      context: ./ipython
      dockerfile: Dockerfile.controller
    networks:
      - backend
    extra_hosts:
      - "godock-ipython:${GODOCK_IPYTHON_CONTROLLER_IP}"
    ports:
      - "33327-33338:33327-33338"
  ipython-engine:
    build:
      context: ./ipython
      dockerfile: Dockerfile.engine
    networks:
      - backend
    extra_hosts:
      - "godock-ipython:${GODOCK_IPYTHON_CONTROLLER_IP}"

  ### Docker-in-Docker ################################################
  docker-in-docker:
    image: docker:20.10-dind
    environment:
      DOCKER_TLS_SAN: DNS:docker-in-docker
    privileged: true
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - docker-in-docker:/certs/client
    expose:
      - 2375
    networks:
      - backend

  ### NetData ################################################
  netdata:
    image: netdata/netdata:latest
    cap_add:
      - SYS_PTRACE
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "${NETDATA_PORT}:19999"
    networks:
      - backend

  ### Metabase #################################################
  metabase:
    image: metabase/metabase:latest
    environment:
      - MB_DB_FILE=/metabase-data/${METABASE_DB_FILE}
    ports:
      - ${METABASE_PORT}:3000
    volumes:
      - ${DATA_PATH_HOST}/metabase-data:/metabase-data
    networks:
      - backend

  ### kafka ####################################################
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_MESSAGE_MAX_BYTES: 2000000
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ${DATA_PATH_HOST}/kafka:/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend

  ### kafka-manager ###########################################
  kafka-manager:
    image: sheepkiller/kafka-manager
    ports:
      - 9020:9000
    environment:
      ZK_HOSTS: zookeeper:2181
    networks:
      - backend
